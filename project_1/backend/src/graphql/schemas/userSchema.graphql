type User {
    id: ID!
    name: String!
    email: String!
    role: String!
    password: String!
    createdAt: String!
    updatedAt: String!
}

type AuthPayload{
    token: String!
    user: User!
}

type UserResponse {
    id: ID
    name: String
    email: String
    role: String
    token: String!
}

input UserInput {
    name: String!
    email: String!
    role: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    role: String
    password: String
}

input AuthInput {
    email: String!
    password: String!
}

type Query {
    users: [User!]!
    user(id: ID!): User!
    me: User!
}

type Mutation {
    createUser(input: UserInput!): AuthPayload!
    updateUser(id: ID!, input: UpdateUserInput!): User!
    deleteUser(id: ID!): User!
    login(input: AuthInput!): AuthPayload!
}